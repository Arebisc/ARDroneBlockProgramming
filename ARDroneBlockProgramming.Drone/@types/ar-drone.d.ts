/** Declaration file generated by dts-gen */
declare module 'ar-drone' {

    export class Client {
        public _udpNavdatasStream: UdpNavdataStream;
        public _options: any;
        public _udpControl: UdpControl;
        public _pngStream: PngStream;
        public _tcpVideoStream: any;
        public _ref: any;
        public _interval: any;
        public _pcmd: any;
        public _repeaters: any;
        public _afterOffset: any;
        public _disableEmergency: boolean;
        public _lastState: any;
        public _lastBattery: any;
        public _lastAltitude: any;

        constructor(options: any);

        after(duration: any, fn: any): any;

        animate(animation: any, duration: any): void;

        animateLeds(animation: any, hz: any, duration: any): void;

        back(speed: any): any;

        battery(): any;

        calibrate(device_num: any): void;

        clockwise(speed: any): any;

        config(key: any, value: any, callback?: any): void;

        counterClockwise(speed: any): any;

        createPngStream(): any;

        createRepl(): any;

        ctrl(controlMode: any, otherMode: any): void;

        disableEmergency(): void;

        down(speed: any): any;

        front(speed: any): any;

        ftrim(): any;

        getPngStream(): any;

        getVideoStream(): any;

        land(cb: any): any;

        left(speed: any): any;

        resume(): void;

        right(speed: any): any;

        stop(): any;

        takeoff(cb: any): any;

        up(speed: any): any;

        on(eventName: string, callback: Function);

        once(eventName: string, callback: Function);

    }

    export class PngStream {
        constructor(options: any);

        resume(): void;

        once(data: string, callback: Function): any;
    }

    export class UdpControl {
        constructor(options: any);

        ack(): void;

        ackReset(): void;

        animate(...args: any[]): any;

        animateLeds(...args: any[]): any;

        calibrate(...args: any[]): any;

        close(): void;

        config(...args: any[]): any;

        ctrl(...args: any[]): any;

        flush(): void;

        ftrim(...args: any[]): any;

        pcmd(...args: any[]): any;

        raw(...args: any[]): any;

        ref(...args: any[]): any;

    }

    export class UdpNavdataStream {
        constructor(options: any);

        destroy(): void;

        resume(): void;

    }

    export function createClient(options: any): any;

    export function createPngStream(options: any): any;

    export function createUdpControl(options?: any): UdpControl;

    export function createUdpNavdataStream(options: any): any;

    export namespace Client {
        class PngEncoder {
            constructor(options: any);

            end(): void;

            write(buffer: any): any;

        }

        class PngStream {
            constructor(options: any);

            resume(): void;

        }

        class Repl {
            constructor(client: any);

            resume(): void;

        }

        class TcpVideoStream {
            constructor(options: any);

            connect(cb: any): void;

            end(): void;

        }

        class UdpControl {
            constructor(options: any);

            ack(): void;

            ackReset(): void;

            animate(...args: any[]): any;

            animateLeds(...args: any[]): any;

            calibrate(...args: any[]): any;

            close(): void;

            config(...args: any[]): any;

            ctrl(...args: any[]): any;

            flush(): void;

            ftrim(...args: any[]): any;

            pcmd(...args: any[]): any;

            raw(...args: any[]): any;

            ref(...args: any[]): any;

        }

        class UdpNavdataStream {
            constructor(options: any);

            destroy(): void;

            resume(): void;

        }

        namespace PngEncoder {
            // namespace prototype {
                const domain: any;

                function addListener(type: any, listener: any): any;

                function emit(type: any, ...args: any[]): any;

                function end(): void;

                function eventNames(): any;

                function getMaxListeners(): any;

                function listenerCount(type: any): any;

                function listeners(type: any): any;

                function on(type: any, listener: any): any;

                function once(type: any, listener: any): any;

                function pipe(dest: any, options: any): any;

                function prependListener(type: any, listener: any): any;

                function prependOnceListener(type: any, listener: any): any;

                function removeAllListeners(type: any, ...args: any[]): any;

                function removeListener(type: any, listener: any): any;

                function setMaxListeners(n: any): any;

                function write(buffer: any): any;

                namespace addListener {
                    // Too-deep object hierarchy from ar_drone.Client.PngEncoder.prototype.addListener
                    const prototype: any;

                }

                namespace emit {
                    // Too-deep object hierarchy from ar_drone.Client.PngEncoder.prototype.emit
                    const prototype: any;

                }

                namespace end {
                    // Too-deep object hierarchy from ar_drone.Client.PngEncoder.prototype.end
                    const prototype: any;

                }

                namespace eventNames {
                    // Too-deep object hierarchy from ar_drone.Client.PngEncoder.prototype.eventNames
                    const prototype: any;

                }

                namespace getMaxListeners {
                    // Too-deep object hierarchy from ar_drone.Client.PngEncoder.prototype.getMaxListeners
                    const prototype: any;

                }

                namespace listenerCount {
                    // Too-deep object hierarchy from ar_drone.Client.PngEncoder.prototype.listenerCount
                    const prototype: any;

                }

                namespace listeners {
                    // Too-deep object hierarchy from ar_drone.Client.PngEncoder.prototype.listeners
                    const prototype: any;

                }

                namespace on {
                    // Too-deep object hierarchy from ar_drone.Client.PngEncoder.prototype.on
                    const prototype: any;

                }

                namespace once {
                    // Too-deep object hierarchy from ar_drone.Client.PngEncoder.prototype.once
                    const prototype: any;

                }

                namespace pipe {
                    // Too-deep object hierarchy from ar_drone.Client.PngEncoder.prototype.pipe
                    const prototype: any;

                }

                namespace prependListener {
                    // Too-deep object hierarchy from ar_drone.Client.PngEncoder.prototype.prependListener
                    const prototype: any;

                }

                namespace prependOnceListener {
                    // Too-deep object hierarchy from ar_drone.Client.PngEncoder.prototype.prependOnceListener
                    const prototype: any;

                }

                namespace removeAllListeners {
                    // Too-deep object hierarchy from ar_drone.Client.PngEncoder.prototype.removeAllListeners
                    const prototype: any;

                }

                namespace removeListener {
                    // Too-deep object hierarchy from ar_drone.Client.PngEncoder.prototype.removeListener
                    const prototype: any;

                }

                namespace setMaxListeners {
                    // Too-deep object hierarchy from ar_drone.Client.PngEncoder.prototype.setMaxListeners
                    const prototype: any;

                }

                namespace write {
                    // Too-deep object hierarchy from ar_drone.Client.PngEncoder.prototype.write
                    const prototype: any;

                }

            // }

        }

        namespace PngStream {
            class PngEncoder {
                constructor(options: any);

                end(): void;

                write(buffer: any): any;

            }

            class TcpVideoStream {
                constructor(options: any);

                connect(cb: any): void;

                end(): void;

            }

            namespace PngEncoder {
                // namespace prototype {
                    // Too-deep object hierarchy from ar_drone.Client.PngStream.PngEncoder.prototype
                    const addListener: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.PngEncoder.prototype
                    const domain: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.PngEncoder.prototype
                    const emit: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.PngEncoder.prototype
                    const end: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.PngEncoder.prototype
                    const eventNames: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.PngEncoder.prototype
                    const getMaxListeners: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.PngEncoder.prototype
                    const listenerCount: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.PngEncoder.prototype
                    const listeners: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.PngEncoder.prototype
                    const on: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.PngEncoder.prototype
                    const once: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.PngEncoder.prototype
                    const pipe: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.PngEncoder.prototype
                    const prependListener: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.PngEncoder.prototype
                    const prependOnceListener: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.PngEncoder.prototype
                    const removeAllListeners: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.PngEncoder.prototype
                    const removeListener: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.PngEncoder.prototype
                    const setMaxListeners: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.PngEncoder.prototype
                    const write: any;

                // }

            }

            namespace TcpVideoStream {
                // namespace prototype {
                    // Too-deep object hierarchy from ar_drone.Client.PngStream.TcpVideoStream.prototype
                    const addListener: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.TcpVideoStream.prototype
                    const connect: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.TcpVideoStream.prototype
                    const domain: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.TcpVideoStream.prototype
                    const emit: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.TcpVideoStream.prototype
                    const end: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.TcpVideoStream.prototype
                    const eventNames: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.TcpVideoStream.prototype
                    const getMaxListeners: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.TcpVideoStream.prototype
                    const listenerCount: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.TcpVideoStream.prototype
                    const listeners: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.TcpVideoStream.prototype
                    const on: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.TcpVideoStream.prototype
                    const once: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.TcpVideoStream.prototype
                    const pipe: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.TcpVideoStream.prototype
                    const prependListener: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.TcpVideoStream.prototype
                    const prependOnceListener: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.TcpVideoStream.prototype
                    const removeAllListeners: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.TcpVideoStream.prototype
                    const removeListener: any;

                    // Too-deep object hierarchy from ar_drone.Client.PngStream.TcpVideoStream.prototype
                    const setMaxListeners: any;

                // }

            }

            // namespace prototype {
                const domain: any;

                function addListener(type: any, listener: any): any;

                function emit(type: any, ...args: any[]): any;

                function eventNames(): any;

                function getMaxListeners(): any;

                function listenerCount(type: any): any;

                function listeners(type: any): any;

                function on(type: any, listener: any): any;

                function once(type: any, listener: any): any;

                function pipe(dest: any, options: any): any;

                function prependListener(type: any, listener: any): any;

                function prependOnceListener(type: any, listener: any): any;

                function removeAllListeners(type: any, ...args: any[]): any;

                function removeListener(type: any, listener: any): any;

                function resume(): void;

                function setMaxListeners(n: any): any;

                namespace addListener {
                    // Too-deep object hierarchy from ar_drone.Client.PngStream.prototype.addListener
                    const prototype: any;

                }

                namespace emit {
                    // Too-deep object hierarchy from ar_drone.Client.PngStream.prototype.emit
                    const prototype: any;

                }

                namespace eventNames {
                    // Too-deep object hierarchy from ar_drone.Client.PngStream.prototype.eventNames
                    const prototype: any;

                }

                namespace getMaxListeners {
                    // Too-deep object hierarchy from ar_drone.Client.PngStream.prototype.getMaxListeners
                    const prototype: any;

                }

                namespace listenerCount {
                    // Too-deep object hierarchy from ar_drone.Client.PngStream.prototype.listenerCount
                    const prototype: any;

                }

                namespace listeners {
                    // Too-deep object hierarchy from ar_drone.Client.PngStream.prototype.listeners
                    const prototype: any;

                }

                namespace on {
                    // Too-deep object hierarchy from ar_drone.Client.PngStream.prototype.on
                    const prototype: any;

                }

                namespace once {
                    // Too-deep object hierarchy from ar_drone.Client.PngStream.prototype.once
                    const prototype: any;

                }

                namespace pipe {
                    // Too-deep object hierarchy from ar_drone.Client.PngStream.prototype.pipe
                    const prototype: any;

                }

                namespace prependListener {
                    // Too-deep object hierarchy from ar_drone.Client.PngStream.prototype.prependListener
                    const prototype: any;

                }

                namespace prependOnceListener {
                    // Too-deep object hierarchy from ar_drone.Client.PngStream.prototype.prependOnceListener
                    const prototype: any;

                }

                namespace removeAllListeners {
                    // Too-deep object hierarchy from ar_drone.Client.PngStream.prototype.removeAllListeners
                    const prototype: any;

                }

                namespace removeListener {
                    // Too-deep object hierarchy from ar_drone.Client.PngStream.prototype.removeListener
                    const prototype: any;

                }

                namespace resume {
                    // Too-deep object hierarchy from ar_drone.Client.PngStream.prototype.resume
                    const prototype: any;

                }

                namespace setMaxListeners {
                    // Too-deep object hierarchy from ar_drone.Client.PngStream.prototype.setMaxListeners
                    const prototype: any;

                }

            // }

        }

        namespace Repl {
            // namespace prototype {
                function resume(): void;

                namespace resume {
                    // Too-deep object hierarchy from ar_drone.Client.Repl.prototype.resume
                    const prototype: any;

                }

            // }

        }

        namespace TcpVideoStream {
            // namespace prototype {
                const domain: any;

                function addListener(type: any, listener: any): any;

                function connect(cb: any): void;

                function emit(type: any, ...args: any[]): any;

                function end(): void;

                function eventNames(): any;

                function getMaxListeners(): any;

                function listenerCount(type: any): any;

                function listeners(type: any): any;

                function on(type: any, listener: any): any;

                function once(type: any, listener: any): any;

                function pipe(dest: any, options: any): any;

                function prependListener(type: any, listener: any): any;

                function prependOnceListener(type: any, listener: any): any;

                function removeAllListeners(type: any, ...args: any[]): any;

                function removeListener(type: any, listener: any): any;

                function setMaxListeners(n: any): any;

                namespace addListener {
                    // Too-deep object hierarchy from ar_drone.Client.TcpVideoStream.prototype.addListener
                    const prototype: any;

                }

                namespace connect {
                    // Too-deep object hierarchy from ar_drone.Client.TcpVideoStream.prototype.connect
                    const prototype: any;

                }

                namespace emit {
                    // Too-deep object hierarchy from ar_drone.Client.TcpVideoStream.prototype.emit
                    const prototype: any;

                }

                namespace end {
                    // Too-deep object hierarchy from ar_drone.Client.TcpVideoStream.prototype.end
                    const prototype: any;

                }

                namespace eventNames {
                    // Too-deep object hierarchy from ar_drone.Client.TcpVideoStream.prototype.eventNames
                    const prototype: any;

                }

                namespace getMaxListeners {
                    // Too-deep object hierarchy from ar_drone.Client.TcpVideoStream.prototype.getMaxListeners
                    const prototype: any;

                }

                namespace listenerCount {
                    // Too-deep object hierarchy from ar_drone.Client.TcpVideoStream.prototype.listenerCount
                    const prototype: any;

                }

                namespace listeners {
                    // Too-deep object hierarchy from ar_drone.Client.TcpVideoStream.prototype.listeners
                    const prototype: any;

                }

                namespace on {
                    // Too-deep object hierarchy from ar_drone.Client.TcpVideoStream.prototype.on
                    const prototype: any;

                }

                namespace once {
                    // Too-deep object hierarchy from ar_drone.Client.TcpVideoStream.prototype.once
                    const prototype: any;

                }

                namespace pipe {
                    // Too-deep object hierarchy from ar_drone.Client.TcpVideoStream.prototype.pipe
                    const prototype: any;

                }

                namespace prependListener {
                    // Too-deep object hierarchy from ar_drone.Client.TcpVideoStream.prototype.prependListener
                    const prototype: any;

                }

                namespace prependOnceListener {
                    // Too-deep object hierarchy from ar_drone.Client.TcpVideoStream.prototype.prependOnceListener
                    const prototype: any;

                }

                namespace removeAllListeners {
                    // Too-deep object hierarchy from ar_drone.Client.TcpVideoStream.prototype.removeAllListeners
                    const prototype: any;

                }

                namespace removeListener {
                    // Too-deep object hierarchy from ar_drone.Client.TcpVideoStream.prototype.removeListener
                    const prototype: any;

                }

                namespace setMaxListeners {
                    // Too-deep object hierarchy from ar_drone.Client.TcpVideoStream.prototype.setMaxListeners
                    const prototype: any;

                }

            // }

        }

        namespace UdpControl {
            // namespace prototype {
                function ack(): void;

                function ackReset(): void;

                function animate(...args: any[]): any;

                function animateLeds(...args: any[]): any;

                function calibrate(...args: any[]): any;

                function close(): void;

                function config(...args: any[]): any;

                function ctrl(...args: any[]): any;

                function flush(): void;

                function ftrim(...args: any[]): any;

                function pcmd(...args: any[]): any;

                function raw(...args: any[]): any;

                function ref(...args: any[]): any;

                namespace ack {
                    // Too-deep object hierarchy from ar_drone.Client.UdpControl.prototype.ack
                    const prototype: any;

                }

                namespace ackReset {
                    // Too-deep object hierarchy from ar_drone.Client.UdpControl.prototype.ackReset
                    const prototype: any;

                }

                namespace animate {
                    // Too-deep object hierarchy from ar_drone.Client.UdpControl.prototype.animate
                    const prototype: any;

                }

                namespace animateLeds {
                    // Too-deep object hierarchy from ar_drone.Client.UdpControl.prototype.animateLeds
                    const prototype: any;

                }

                namespace calibrate {
                    // Too-deep object hierarchy from ar_drone.Client.UdpControl.prototype.calibrate
                    const prototype: any;

                }

                namespace close {
                    // Too-deep object hierarchy from ar_drone.Client.UdpControl.prototype.close
                    const prototype: any;

                }

                namespace config {
                    // Too-deep object hierarchy from ar_drone.Client.UdpControl.prototype.config
                    const prototype: any;

                }

                namespace ctrl {
                    // Too-deep object hierarchy from ar_drone.Client.UdpControl.prototype.ctrl
                    const prototype: any;

                }

                namespace flush {
                    // Too-deep object hierarchy from ar_drone.Client.UdpControl.prototype.flush
                    const prototype: any;

                }

                namespace ftrim {
                    // Too-deep object hierarchy from ar_drone.Client.UdpControl.prototype.ftrim
                    const prototype: any;

                }

                namespace pcmd {
                    // Too-deep object hierarchy from ar_drone.Client.UdpControl.prototype.pcmd
                    const prototype: any;

                }

                namespace raw {
                    // Too-deep object hierarchy from ar_drone.Client.UdpControl.prototype.raw
                    const prototype: any;

                }

                namespace ref {
                    // Too-deep object hierarchy from ar_drone.Client.UdpControl.prototype.ref
                    const prototype: any;

                }

            // }

        }

        namespace UdpNavdataStream {
            // namespace prototype {
                const domain: any;

                function addListener(type: any, listener: any): any;

                function destroy(): void;

                function emit(type: any, ...args: any[]): any;

                function eventNames(): any;

                function getMaxListeners(): any;

                function listenerCount(type: any): any;

                function listeners(type: any): any;

                function on(type: any, listener: any): any;

                function once(type: any, listener: any): any;

                function pipe(dest: any, options: any): any;

                function prependListener(type: any, listener: any): any;

                function prependOnceListener(type: any, listener: any): any;

                function removeAllListeners(type: any, ...args: any[]): any;

                function removeListener(type: any, listener: any): any;

                function resume(): void;

                function setMaxListeners(n: any): any;

                namespace addListener {
                    // Too-deep object hierarchy from ar_drone.Client.UdpNavdataStream.prototype.addListener
                    const prototype: any;

                }

                namespace destroy {
                    // Too-deep object hierarchy from ar_drone.Client.UdpNavdataStream.prototype.destroy
                    const prototype: any;

                }

                namespace emit {
                    // Too-deep object hierarchy from ar_drone.Client.UdpNavdataStream.prototype.emit
                    const prototype: any;

                }

                namespace eventNames {
                    // Too-deep object hierarchy from ar_drone.Client.UdpNavdataStream.prototype.eventNames
                    const prototype: any;

                }

                namespace getMaxListeners {
                    // Too-deep object hierarchy from ar_drone.Client.UdpNavdataStream.prototype.getMaxListeners
                    const prototype: any;

                }

                namespace listenerCount {
                    // Too-deep object hierarchy from ar_drone.Client.UdpNavdataStream.prototype.listenerCount
                    const prototype: any;

                }

                namespace listeners {
                    // Too-deep object hierarchy from ar_drone.Client.UdpNavdataStream.prototype.listeners
                    const prototype: any;

                }

                namespace on {
                    // Too-deep object hierarchy from ar_drone.Client.UdpNavdataStream.prototype.on
                    const prototype: any;

                }

                namespace once {
                    // Too-deep object hierarchy from ar_drone.Client.UdpNavdataStream.prototype.once
                    const prototype: any;

                }

                namespace pipe {
                    // Too-deep object hierarchy from ar_drone.Client.UdpNavdataStream.prototype.pipe
                    const prototype: any;

                }

                namespace prependListener {
                    // Too-deep object hierarchy from ar_drone.Client.UdpNavdataStream.prototype.prependListener
                    const prototype: any;

                }

                namespace prependOnceListener {
                    // Too-deep object hierarchy from ar_drone.Client.UdpNavdataStream.prototype.prependOnceListener
                    const prototype: any;

                }

                namespace removeAllListeners {
                    // Too-deep object hierarchy from ar_drone.Client.UdpNavdataStream.prototype.removeAllListeners
                    const prototype: any;

                }

                namespace removeListener {
                    // Too-deep object hierarchy from ar_drone.Client.UdpNavdataStream.prototype.removeListener
                    const prototype: any;

                }

                namespace resume {
                    // Too-deep object hierarchy from ar_drone.Client.UdpNavdataStream.prototype.resume
                    const prototype: any;

                }

                namespace setMaxListeners {
                    // Too-deep object hierarchy from ar_drone.Client.UdpNavdataStream.prototype.setMaxListeners
                    const prototype: any;

                }

            // }

        }

        // namespace prototype {
            const domain: any;

            function addListener(type: any, listener: any): any;

            function after(duration: any, fn: any): any;

            function animate(animation: any, duration: any): void;

            function animateLeds(animation: any, hz: any, duration: any): void;

            function back(speed: any): any;

            function battery(): any;

            function calibrate(device_num: any): void;

            function clockwise(speed: any): any;

            function config(key: any, value: any, callback: any): void;

            function counterClockwise(speed: any): any;

            function createPngStream(): any;

            function createRepl(): any;

            function ctrl(controlMode: any, otherMode: any): void;

            function disableEmergency(): void;

            function down(speed: any): any;

            function emit(type: any, ...args: any[]): any;

            function eventNames(): any;

            function front(speed: any): any;

            function ftrim(): any;

            function getMaxListeners(): any;

            function getPngStream(): any;

            function getVideoStream(): any;

            function land(cb: any): any;

            function left(speed: any): any;

            function listenerCount(type: any): any;

            function listeners(type: any): any;

            function on(type: any, listener: any): any;

            function once(type: any, listener: any): any;

            function prependListener(type: any, listener: any): any;

            function prependOnceListener(type: any, listener: any): any;

            function removeAllListeners(type: any, ...args: any[]): any;

            function removeListener(type: any, listener: any): any;

            function resume(): void;

            function right(speed: any): any;

            function setMaxListeners(n: any): any;

            function stop(): any;

            function takeoff(cb: any): any;

            function up(speed: any): any;

            namespace addListener {
                const prototype: {
                };

            }

            namespace after {
                const prototype: {
                };

            }

            namespace animate {
                const prototype: {
                };

            }

            namespace animateLeds {
                const prototype: {
                };

            }

            namespace back {
                const prototype: {
                };

            }

            namespace battery {
                const prototype: {
                };

            }

            namespace calibrate {
                const prototype: {
                };

            }

            namespace clockwise {
                const prototype: {
                };

            }

            namespace config {
                const prototype: {
                };

            }

            namespace counterClockwise {
                const prototype: {
                };

            }

            namespace createPngStream {
                const prototype: {
                };

            }

            namespace createRepl {
                const prototype: {
                };

            }

            namespace ctrl {
                const prototype: {
                };

            }

            namespace disableEmergency {
                const prototype: {
                };

            }

            namespace down {
                const prototype: {
                };

            }

            namespace emit {
                const prototype: {
                };

            }

            namespace eventNames {
                const prototype: {
                };

            }

            namespace front {
                const prototype: {
                };

            }

            namespace ftrim {
                const prototype: {
                };

            }

            namespace getMaxListeners {
                const prototype: {
                };

            }

            namespace getPngStream {
                const prototype: {
                };

            }

            namespace getVideoStream {
                const prototype: {
                };

            }

            namespace land {
                const prototype: {
                };

            }

            namespace left {
                const prototype: {
                };

            }

            namespace listenerCount {
                const prototype: {
                };

            }

            namespace listeners {
                const prototype: {
                };

            }

            namespace on {
                const prototype: {
                };

            }

            namespace once {
                const prototype: {
                };

            }

            namespace prependListener {
                const prototype: {
                };

            }

            namespace prependOnceListener {
                const prototype: {
                };

            }

            namespace removeAllListeners {
                const prototype: {
                };

            }

            namespace removeListener {
                const prototype: {
                };

            }

            namespace resume {
                const prototype: {
                };

            }

            namespace right {
                const prototype: {
                };

            }

            namespace setMaxListeners {
                const prototype: {
                };

            }

            namespace stop {
                const prototype: {
                };

            }

            namespace takeoff {
                const prototype: {
                };

            }

            namespace up {
                const prototype: {
                };

            }

        // }

    }

    export namespace PngStream {
        class PngEncoder {
            constructor(options: any);

            end(): void;

            write(buffer: any): any;

        }

        class TcpVideoStream {
            constructor(options: any);

            connect(cb: any): void;

            end(): void;

        }

        namespace PngEncoder {
            // namespace prototype {
                const domain: any;

                function addListener(type: any, listener: any): any;

                function emit(type: any, ...args: any[]): any;

                function end(): void;

                function eventNames(): any;

                function getMaxListeners(): any;

                function listenerCount(type: any): any;

                function listeners(type: any): any;

                function on(type: any, listener: any): any;

                function once(type: any, listener: any): any;

                function pipe(dest: any, options: any): any;

                function prependListener(type: any, listener: any): any;

                function prependOnceListener(type: any, listener: any): any;

                function removeAllListeners(type: any, ...args: any[]): any;

                function removeListener(type: any, listener: any): any;

                function setMaxListeners(n: any): any;

                function write(buffer: any): any;

                namespace addListener {
                    // Too-deep object hierarchy from ar_drone.PngStream.PngEncoder.prototype.addListener
                    const prototype: any;

                }

                namespace emit {
                    // Too-deep object hierarchy from ar_drone.PngStream.PngEncoder.prototype.emit
                    const prototype: any;

                }

                namespace end {
                    // Too-deep object hierarchy from ar_drone.PngStream.PngEncoder.prototype.end
                    const prototype: any;

                }

                namespace eventNames {
                    // Too-deep object hierarchy from ar_drone.PngStream.PngEncoder.prototype.eventNames
                    const prototype: any;

                }

                namespace getMaxListeners {
                    // Too-deep object hierarchy from ar_drone.PngStream.PngEncoder.prototype.getMaxListeners
                    const prototype: any;

                }

                namespace listenerCount {
                    // Too-deep object hierarchy from ar_drone.PngStream.PngEncoder.prototype.listenerCount
                    const prototype: any;

                }

                namespace listeners {
                    // Too-deep object hierarchy from ar_drone.PngStream.PngEncoder.prototype.listeners
                    const prototype: any;

                }

                namespace on {
                    // Too-deep object hierarchy from ar_drone.PngStream.PngEncoder.prototype.on
                    const prototype: any;

                }

                namespace once {
                    // Too-deep object hierarchy from ar_drone.PngStream.PngEncoder.prototype.once
                    const prototype: any;

                }

                namespace pipe {
                    // Too-deep object hierarchy from ar_drone.PngStream.PngEncoder.prototype.pipe
                    const prototype: any;

                }

                namespace prependListener {
                    // Too-deep object hierarchy from ar_drone.PngStream.PngEncoder.prototype.prependListener
                    const prototype: any;

                }

                namespace prependOnceListener {
                    // Too-deep object hierarchy from ar_drone.PngStream.PngEncoder.prototype.prependOnceListener
                    const prototype: any;

                }

                namespace removeAllListeners {
                    // Too-deep object hierarchy from ar_drone.PngStream.PngEncoder.prototype.removeAllListeners
                    const prototype: any;

                }

                namespace removeListener {
                    // Too-deep object hierarchy from ar_drone.PngStream.PngEncoder.prototype.removeListener
                    const prototype: any;

                }

                namespace setMaxListeners {
                    // Too-deep object hierarchy from ar_drone.PngStream.PngEncoder.prototype.setMaxListeners
                    const prototype: any;

                }

                namespace write {
                    // Too-deep object hierarchy from ar_drone.PngStream.PngEncoder.prototype.write
                    const prototype: any;

                }

            // }

        }

        namespace TcpVideoStream {
            // namespace prototype {
                const domain: any;

                function addListener(type: any, listener: any): any;

                function connect(cb: any): void;

                function emit(type: any, ...args: any[]): any;

                function end(): void;

                function eventNames(): any;

                function getMaxListeners(): any;

                function listenerCount(type: any): any;

                function listeners(type: any): any;

                function on(type: any, listener: any): any;

                function once(type: any, listener: any): any;

                function pipe(dest: any, options: any): any;

                function prependListener(type: any, listener: any): any;

                function prependOnceListener(type: any, listener: any): any;

                function removeAllListeners(type: any, ...args: any[]): any;

                function removeListener(type: any, listener: any): any;

                function setMaxListeners(n: any): any;

                namespace addListener {
                    // Too-deep object hierarchy from ar_drone.PngStream.TcpVideoStream.prototype.addListener
                    const prototype: any;

                }

                namespace connect {
                    // Too-deep object hierarchy from ar_drone.PngStream.TcpVideoStream.prototype.connect
                    const prototype: any;

                }

                namespace emit {
                    // Too-deep object hierarchy from ar_drone.PngStream.TcpVideoStream.prototype.emit
                    const prototype: any;

                }

                namespace end {
                    // Too-deep object hierarchy from ar_drone.PngStream.TcpVideoStream.prototype.end
                    const prototype: any;

                }

                namespace eventNames {
                    // Too-deep object hierarchy from ar_drone.PngStream.TcpVideoStream.prototype.eventNames
                    const prototype: any;

                }

                namespace getMaxListeners {
                    // Too-deep object hierarchy from ar_drone.PngStream.TcpVideoStream.prototype.getMaxListeners
                    const prototype: any;

                }

                namespace listenerCount {
                    // Too-deep object hierarchy from ar_drone.PngStream.TcpVideoStream.prototype.listenerCount
                    const prototype: any;

                }

                namespace listeners {
                    // Too-deep object hierarchy from ar_drone.PngStream.TcpVideoStream.prototype.listeners
                    const prototype: any;

                }

                namespace on {
                    // Too-deep object hierarchy from ar_drone.PngStream.TcpVideoStream.prototype.on
                    const prototype: any;

                }

                namespace once {
                    // Too-deep object hierarchy from ar_drone.PngStream.TcpVideoStream.prototype.once
                    const prototype: any;

                }

                namespace pipe {
                    // Too-deep object hierarchy from ar_drone.PngStream.TcpVideoStream.prototype.pipe
                    const prototype: any;

                }

                namespace prependListener {
                    // Too-deep object hierarchy from ar_drone.PngStream.TcpVideoStream.prototype.prependListener
                    const prototype: any;

                }

                namespace prependOnceListener {
                    // Too-deep object hierarchy from ar_drone.PngStream.TcpVideoStream.prototype.prependOnceListener
                    const prototype: any;

                }

                namespace removeAllListeners {
                    // Too-deep object hierarchy from ar_drone.PngStream.TcpVideoStream.prototype.removeAllListeners
                    const prototype: any;

                }

                namespace removeListener {
                    // Too-deep object hierarchy from ar_drone.PngStream.TcpVideoStream.prototype.removeListener
                    const prototype: any;

                }

                namespace setMaxListeners {
                    // Too-deep object hierarchy from ar_drone.PngStream.TcpVideoStream.prototype.setMaxListeners
                    const prototype: any;

                }

            // }

        }

        // namespace prototype {
            const domain: any;

            function addListener(type: any, listener: any): any;

            function emit(type: any, ...args: any[]): any;

            function eventNames(): any;

            function getMaxListeners(): any;

            function listenerCount(type: any): any;

            function listeners(type: any): any;

            function on(type: any, listener: any): any;

            function once(type: any, listener: any): any;

            function pipe(dest: any, options: any): any;

            function prependListener(type: any, listener: any): any;

            function prependOnceListener(type: any, listener: any): any;

            function removeAllListeners(type: any, ...args: any[]): any;

            function removeListener(type: any, listener: any): any;

            function resume(): void;

            function setMaxListeners(n: any): any;

            namespace addListener {
                const prototype: {
                };

            }

            namespace emit {
                const prototype: {
                };

            }

            namespace eventNames {
                const prototype: {
                };

            }

            namespace getMaxListeners {
                const prototype: {
                };

            }

            namespace listenerCount {
                const prototype: {
                };

            }

            namespace listeners {
                const prototype: {
                };

            }

            namespace on {
                const prototype: {
                };

            }

            namespace once {
                const prototype: {
                };

            }

            namespace pipe {
                const prototype: {
                };

            }

            namespace prependListener {
                const prototype: {
                };

            }

            namespace prependOnceListener {
                const prototype: {
                };

            }

            namespace removeAllListeners {
                const prototype: {
                };

            }

            namespace removeListener {
                const prototype: {
                };

            }

            namespace resume {
                const prototype: {
                };

            }

            namespace setMaxListeners {
                const prototype: {
                };

            }

        // }

    }

    export namespace UdpControl {
        // namespace prototype {
            function ack(): void;

            function ackReset(): void;

            function animate(...args: any[]): any;

            function animateLeds(...args: any[]): any;

            function calibrate(...args: any[]): any;

            function close(): void;

            function config(...args: any[]): any;

            function ctrl(...args: any[]): any;

            function flush(): void;

            function ftrim(...args: any[]): any;

            function pcmd(...args: any[]): any;

            function raw(...args: any[]): any;

            function ref(...args: any[]): any;

            namespace ack {
                const prototype: {
                };

            }

            namespace ackReset {
                const prototype: {
                };

            }

            namespace animate {
                const prototype: {
                };

            }

            namespace animateLeds {
                const prototype: {
                };

            }

            namespace calibrate {
                const prototype: {
                };

            }

            namespace close {
                const prototype: {
                };

            }

            namespace config {
                const prototype: {
                };

            }

            namespace ctrl {
                const prototype: {
                };

            }

            namespace flush {
                const prototype: {
                };

            }

            namespace ftrim {
                const prototype: {
                };

            }

            namespace pcmd {
                const prototype: {
                };

            }

            namespace raw {
                const prototype: {
                };

            }

            namespace ref {
                const prototype: {
                };

            }

        // }

    }

    export namespace UdpNavdataStream {
        // namespace prototype {
            const domain: any;

            function addListener(type: any, listener: any): any;

            function destroy(): void;

            function emit(type: any, ...args: any[]): any;

            function eventNames(): any;

            function getMaxListeners(): any;

            function listenerCount(type: any): any;

            function listeners(type: any): any;

            function on(type: any, listener: any): any;

            function once(type: any, listener: any): any;

            function pipe(dest: any, options: any): any;

            function prependListener(type: any, listener: any): any;

            function prependOnceListener(type: any, listener: any): any;

            function removeAllListeners(type: any, ...args: any[]): any;

            function removeListener(type: any, listener: any): any;

            function resume(): void;

            function setMaxListeners(n: any): any;

            namespace addListener {
                const prototype: {
                };

            }

            namespace destroy {
                const prototype: {
                };

            }

            namespace emit {
                const prototype: {
                };

            }

            namespace eventNames {
                const prototype: {
                };

            }

            namespace getMaxListeners {
                const prototype: {
                };

            }

            namespace listenerCount {
                const prototype: {
                };

            }

            namespace listeners {
                const prototype: {
                };

            }

            namespace on {
                const prototype: {
                };

            }

            namespace once {
                const prototype: {
                };

            }

            namespace pipe {
                const prototype: {
                };

            }

            namespace prependListener {
                const prototype: {
                };

            }

            namespace prependOnceListener {
                const prototype: {
                };

            }

            namespace removeAllListeners {
                const prototype: {
                };

            }

            namespace removeListener {
                const prototype: {
                };

            }

            namespace resume {
                const prototype: {
                };

            }

            namespace setMaxListeners {
                const prototype: {
                };

            }

        // }

    }

    export namespace createClient {
        const prototype: {
        };

    }

    export namespace createPngStream {
        const prototype: {
        };

    }

    export namespace createUdpControl {
        const prototype: {
        };

    }

    export namespace createUdpNavdataStream {
        const prototype: {
        };

    }
}